name: Find merge conflicts

on:
  push:
    branches:
      - "main"

env:
  MERGE_CONFLICT: "error | merge conflict"


jobs:
  check_pr_open_events:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ACTIONS_TOKEN }}
          script: |
            const { MERGE_CONFLICT } = process.env;
            
            async function getPullsNumber() {
              const prList = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "open",
              });

              return prList.data.map(pr => pr.number)
            }

            function isStateDefined(element) {
              return element == "unknown" || element == null
            }

            async function getState(dict) {
              const prNumbers = Object.keys(dict);
              const promisesArr = [];
              for( let i = 0; i < prNumbers.length; i++){
                promisesArr.push(github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: Number(prNumbers[i]),
                }))
              }
              return Promise.all(promisesArr)
            }
              
            const numbers = await getPullsNumber();
            var dict = {};
            numbers.forEach((e)=> {
                dict[e] = null;
            })

            let data = {}
            for (let i=0; i < 5; i++) {
                data = await getPrData(dict)
                data.forEach((prData) => { dict[prData.data.number] = prData.data.mergeable_state })
                const margeableStates = Object.values(dict);
                let isUnknown = false
                margeableStates.forEach((e) => {
                    if (isStateDefined(e)) { isUnknown = true }
                })
                if (isUnknown) {
                  await new Promise(resolve => setTimeout(resolve, 5000));
                  continue;
                } else break;
            }

            for (const [key, value] of Object.entries(data)) {
              if (value == "dirty") {
                github.rest.issues.addLabels({
                  issue_number: Number(key),
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: [MERGE_CONFLICT],
                })
              }
            }
