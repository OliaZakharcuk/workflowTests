name: Find merge conflicts

on:
  push:
    branches:
      - "main"

env:
  MERGE_CONFLICT: "error | merge conflict"


jobs:
  check_pr_open_events:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ACTIONS_TOKEN }}
          script: |
            const { MERGE_CONFLICT } = process.env;
            
            async function getPullsNumber() {
              const prList = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "open",
              });

              const numberList = []
              prList.data.forEach((pr) => { numberList.push(pr.number) })
              return numberList
            }

            async function getState(dict) {
              const prNumbers = Object.keys(dict);
              prNumbers.forEach(async (number) => {
                  if (dict[number] == "unknown" || dict[number] == null) {
                    const pr = await github.rest.pulls.get({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: Number(number),
                    })
                    dict[number] = pr.data.mergeable_state
                  }
              })
              return dict
            }
            
            const numbers = await getPullsNumber();
            var dict = {};
            numbers.forEach((e)=> {
                dict[e] = null;
            })

            let data = {}
            for (let i=0; i < 5; i++) {
                console.log(i, "STEP!!!!!") 
                data = getState(dict)
                const margeableStates = Object.values(dict);
                const isUnknown = false
                margeableStates.forEach((e) => {
                    if (e === "unknown") { isUnknown = true }
                })
                if (isUnknown) {
                  console.log("need rerun") 
                  await new Promise(resolve => setTimeout(resolve, 5000));
                  continue;
                } else break;
            }

            for (const [key, value] of Object.entries(data)) {
              if (value == "dirty") {
                github.rest.issues.addLabels({
                  issue_number: Number(key),
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: [MERGE_CONFLICT],
                })
              }
            }
